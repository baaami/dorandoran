services:
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: ./gateway-service.dockerfile
    restart: always
    environment:
      REDIS_HOST: redis # Redis 서비스 이름
      REDIS_PORT: 6379 # Redis 기본 포트
      REDIS_PASSWORD: admin # Redis 비밀번호
    ports:
      - "2719:80"
    deploy:
      mode: replicated
      replicas: 1

  user-service:
    build:
      context: ./user-service
      dockerfile: ./user-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  chat-service:
    build:
      context: ./chat-service
      dockerfile: ./chat-service.dockerfile
    restart: always
    environment:
      REDIS_HOST: redis # Redis 서비스 이름
      REDIS_PORT: 6379 # Redis 기본 포트
      REDIS_PASSWORD: admin # Redis 비밀번호
    deploy:
      mode: replicated
      replicas: 1

  consumer-service:
    build:
      context: ./consumer-service
      dockerfile: ./consumer-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  auth-service:
    build:
      context: ./auth-service
      dockerfile: ./auth-service.dockerfile
    restart: always
    environment:
      REDIS_HOST: redis # Redis 서비스 이름
      REDIS_PORT: 6379 # Redis 기본 포트
      REDIS_PASSWORD: admin # Redis 비밀번호
    deploy:
      mode: replicated
      replicas: 1

  match-socket-service:
    build:
      context: ./match-socket-service
      dockerfile: ./match-socket-service.dockerfile
    restart: always
    environment:
      REDIS_HOST: redis # Redis 서비스 이름
      REDIS_PORT: 6379 # Redis 기본 포트
      REDIS_PASSWORD: admin # Redis 비밀번호
    deploy:
      mode: replicated
      replicas: 1

  # chat-socket-service:
  #   build:
  #     context: ./chat-socket-service
  #     dockerfile: ./chat-socket-service.dockerfile
  #   restart: always
  #   environment:
  #     REDIS_HOST: redis # Redis 서비스 이름
  #     REDIS_PORT: 6379 # Redis 기본 포트
  #     REDIS_PASSWORD: admin # Redis 비밀번호
  #   deploy:
  #     mode: replicated
  #     replicas: 1

  mysql:
    image: mysql:8
    restart: always
    environment:
      MYSQL_DATABASE: users
      MYSQL_ROOT_PASSWORD: sample
    ports:
      - "3306:3306"
    # volumes:
    #   - ./db-data/mysql:/var/lib/mysql
    deploy:
      mode: replicated
      replicas: 1

  mongo:
    image: "mongo:4.2.16-bionic"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: sample
    # volumes:
    #   - ./db-data/mongo/:/data/db

  rabbitmq:
    image: "rabbitmq:3.9-alpine"
    ports:
      - "5672:5672"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  redis:
    image: redis:alpine
    restart: always
    environment:
      REDIS_PASSWORD: admin # Redis 비밀번호 설정
    ports:
      - "6379:6379"
    command: [
        "redis-server",
        "--requirepass",
        "admin",
        "--save",
        "", # RDB 영속성 비활성화
        "--appendonly",
        "no", # AOF 영속성 비활성화
      ]
    # volumes:
    #   - ./db-data/redis:/data # Redis 데이터 저장소 마운트
